{"ast":null,"code":"var _jsxFileName = \"/Users/kooshaowji/Documents/GitHub/DreamTeam/src/components/Notes/AddNote.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNote, updateNote } from '../../actions/notes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNote = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [noteText, setNoteText] = useState({\n    title: '',\n    content: ''\n  });\n  const note = useSelector(state => currentId ? state.note.find(n => n._id === currentId) : null); // everytime someone clicks edit, change the add note to edit the current note\n\n  useEffect(() => {\n    if (note) {\n      setNoteText({ ...noteText,\n        title: note.title,\n        content: note.content\n      });\n    }\n  }, [currentId, noteText, note]); // clear all the fields \n\n  const clear = () => {\n    setCurrentId(null);\n    setNoteText({\n      title: '',\n      content: ''\n    });\n  };\n\n  const handleSaveClick = event => {\n    if (noteText.content.trim().length > 0) {\n      // IF THE NOTE IS BEING UPDATED  \n      if (currentId) {\n        dispatch(updateNote(currentId, noteText));\n        clear(); // getpost after updating\n      } // IF ITS A NEW NOTE BEING ADDED\n      else {\n        event.preventDefault();\n        dispatch(createNote(noteText));\n        clear(); //setNoteText({title: '', content: '' });\n        // setCurrentId('');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note new\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"2\",\n      cols: \"10\",\n      placeholder: \"Title\",\n      name: \"title\",\n      value: noteText.title,\n      onChange: e => setNoteText({ ...noteText,\n        title: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"8\",\n      cols: \"10\",\n      placeholder: \"Type to add new note\",\n      name: \"content\",\n      value: noteText.content,\n      onChange: e => setNoteText({ ...noteText,\n        content: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note_footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [currentId ? 'Edit ' : 'New ', \"Note\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save\",\n        onClick: clear,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save\",\n        onClick: handleSaveClick,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNote, \"O2Iflk8wwpjowuKJwD3BP1wmxdo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddNote;\nexport default AddNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"sources":["/Users/kooshaowji/Documents/GitHub/DreamTeam/src/components/Notes/AddNote.js"],"names":["useState","useEffect","useDispatch","useSelector","createNote","updateNote","AddNote","currentId","setCurrentId","dispatch","noteText","setNoteText","title","content","note","state","find","n","_id","clear","handleSaveClick","event","trim","length","preventDefault","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {createNote, updateNote} from '../../actions/notes';\n\n\n\nconst AddNote = ({currentId, setCurrentId}) => {\n    const dispatch = useDispatch();\n    const [noteText, setNoteText] = useState({title: '',content: ''});\n    \n    const note = useSelector((state) => currentId ? state.note.find((n) => n._id === currentId) : null);\n    \n    // everytime someone clicks edit, change the add note to edit the current note\n    useEffect(() => {\n        if (note){\n        setNoteText({\n            ...noteText,\n            title: note.title,\n            content:note.content\n        })\n         }\n    }, [currentId,noteText,note])\n\n    // clear all the fields \n    const clear = () => {\n        setCurrentId(null);\n        setNoteText({title: '', content: ''})\n    }\n\n\n    const handleSaveClick = (event) => {\n        if (noteText.content.trim().length > 0){\n            \n            // IF THE NOTE IS BEING UPDATED  \n            if (currentId) {\n              dispatch (updateNote (currentId, noteText))\n             clear();\n            // getpost after updating\n            }\n\n            // IF ITS A NEW NOTE BEING ADDED\n            else{\n            event.preventDefault();\n            dispatch(createNote(noteText));\n            clear();\n            //setNoteText({title: '', content: '' });\n            // setCurrentId('');\n            }\n        }\n    };\n\n\n    return (\n    <div className = \"note new\" >\n        <textarea\n            rows = '2'\n            cols ='10'\n            placeholder = 'Title' \n            name = 'title'\n            value = {noteText.title}\n            onChange={(e) => setNoteText({...noteText, title:e.target.value})}\n        ></textarea>\n        <textarea\n            rows = '8'\n            cols ='10'\n            placeholder = 'Type to add new note' \n            name = \"content\"\n            value = {noteText.content}\n            onChange={(e) => setNoteText({...noteText, content:e.target.value})}\n        ></textarea>\n        <div className = 'note_footer'>\n            <small>{currentId ? 'Edit ' : 'New '}Note</small>\n            <button className = \"save\" onClick={clear}>Cancel</button>\n            <button className = \"save\" onClick={handleSaveClick}>Save</button>\n        </div>\n\n    </div>)\n}\n\nexport default AddNote;"]},"metadata":{},"sourceType":"module"}