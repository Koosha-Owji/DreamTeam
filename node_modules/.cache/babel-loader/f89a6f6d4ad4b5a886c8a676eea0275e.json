{"ast":null,"code":"import _objectSpread from\"/Users/kooshaowji/Documents/GitHub/DreamTeam/dreamcrm/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/kooshaowji/Documents/GitHub/DreamTeam/dreamcrm/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{useDispatch,useSelector}from'react-redux';import{createNote,updateNote}from'../../actions/notes';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddNote=function AddNote(_ref){var currentId=_ref.currentId,setCurrentId=_ref.setCurrentId;var dispatch=useDispatch();var _useState=useState({title:'',content:''}),_useState2=_slicedToArray(_useState,2),noteText=_useState2[0],setNoteText=_useState2[1];var note=useSelector(function(state){return currentId?state.note.find(function(n){return n._id===currentId;}):null;});// everytime someone clicks edit, change the add note to edit the current note\nuseEffect(function(){if(note){setNoteText(_objectSpread(_objectSpread({},noteText),{},{title:note.title,content:note.content}));}},[currentId]);// clear all the fields \nvar clear=function clear(){setCurrentId(null);setNoteText({title:'',content:''});};var handleSaveClick=function handleSaveClick(event){if(noteText.content.trim().length>0){// IF THE NOTE IS BEING UPDATED  \nif(currentId){dispatch(updateNote(currentId,noteText));clear();// getpost after updating\n}// IF ITS A NEW NOTE BEING ADDED\nelse{event.preventDefault();dispatch(createNote(noteText));clear();//setNoteText({title: '', content: '' });\n// setCurrentId('');\n}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"note new\",children:[/*#__PURE__*/_jsx(\"textarea\",{rows:\"2\",cols:\"10\",placeholder:\"Title\",name:\"title\",value:noteText.title,onChange:function onChange(e){return setNoteText(_objectSpread(_objectSpread({},noteText),{},{title:e.target.value}));}}),/*#__PURE__*/_jsx(\"textarea\",{rows:\"8\",cols:\"10\",placeholder:\"Type to add new note\",name:\"content\",value:noteText.content,onChange:function onChange(e){return setNoteText(_objectSpread(_objectSpread({},noteText),{},{content:e.target.value}));}}),/*#__PURE__*/_jsxs(\"div\",{className:\"note_footer\",children:[/*#__PURE__*/_jsxs(\"small\",{children:[currentId?'Edit ':'New ',\"Note\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"save\",onClick:clear,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"save\",onClick:handleSaveClick,children:\"Save\"})]})]});};export default AddNote;","map":{"version":3,"sources":["/Users/kooshaowji/Documents/GitHub/DreamTeam/dreamcrm/src/components/Notes/AddNote.js"],"names":["useState","useEffect","useDispatch","useSelector","createNote","updateNote","AddNote","currentId","setCurrentId","dispatch","title","content","noteText","setNoteText","note","state","find","n","_id","clear","handleSaveClick","event","trim","length","preventDefault","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {createNote, updateNote} from '../../actions/notes';\n\n\n\nconst AddNote = ({currentId, setCurrentId}) => {\n    const dispatch = useDispatch();\n    const [noteText, setNoteText] = useState({title: '',content: ''});\n    \n    const note = useSelector((state) => currentId ? state.note.find((n) => n._id === currentId) : null);\n    \n    // everytime someone clicks edit, change the add note to edit the current note\n    useEffect(() => {\n        if (note){\n        setNoteText({\n            ...noteText,\n            title: note.title,\n            content:note.content\n        })\n         }\n    }, [currentId])\n\n    // clear all the fields \n    const clear = () => {\n        setCurrentId(null);\n        setNoteText({title: '', content: ''})\n    }\n\n\n    const handleSaveClick = (event) => {\n        if (noteText.content.trim().length > 0){\n            \n            // IF THE NOTE IS BEING UPDATED  \n            if (currentId) {\n              dispatch (updateNote (currentId, noteText))\n             clear();\n            // getpost after updating\n            }\n\n            // IF ITS A NEW NOTE BEING ADDED\n            else{\n            event.preventDefault();\n            dispatch(createNote(noteText));\n            clear();\n            //setNoteText({title: '', content: '' });\n            // setCurrentId('');\n            }\n        }\n    };\n\n\n    return (\n    <div className = \"note new\" >\n        <textarea\n            rows = '2'\n            cols ='10'\n            placeholder = 'Title' \n            name = 'title'\n            value = {noteText.title}\n            onChange={(e) => setNoteText({...noteText, title:e.target.value})}\n        ></textarea>\n        <textarea\n            rows = '8'\n            cols ='10'\n            placeholder = 'Type to add new note' \n            name = \"content\"\n            value = {noteText.content}\n            onChange={(e) => setNoteText({...noteText, content:e.target.value})}\n        ></textarea>\n        <div className = 'note_footer'>\n            <small>{currentId ? 'Edit ' : 'New '}Note</small>\n            <button className = \"save\" onClick={clear}>Cancel</button>\n            <button className = \"save\" onClick={handleSaveClick}>Save</button>\n        </div>\n\n    </div>)\n}\n\nexport default AddNote;"]},"metadata":{},"sourceType":"module"}